// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class Parser : MonoBehaviour
{
    public TextAsset file;
    private void Start()
    {
        Load(file);
        List<Row> list = GetRowList();

        //Debug.Log(list.);
    }
    public class Row
    {
        public string gpsDate;
        public string latitude;
        public string longitude;
        public string Power_Mode;
        public string Fuel_Consum;
        public string GD_Engine_Temp;
        public string Steering_Angle_Speed;
        public string Transmission_Type;
        public string Vehicle_Speed;
        public string Engine_Speed;
        public string Brake_Control_Volume;
        public string Radar_Cruise_State;
        public string Streering_Angle_Degree;
        public string Odometer_Reading;
        public string Hood_Courtesy;
        public string Passenger_AC_Value;
        public string Driver_AC_Value;
        public string Fuel_Gauge;
        public string Rear_Fog_Light;
        public string Front_Fog_Light;
        public string Lounge_Illum_Light;
        public string Front_Dome_Light;
        public string Slide_Roof;
        public string Passenger_Window_State;
        public string RR_Window_State;
        public string Driver_Window_State;
        public string RL_Window_State;
        public string AccelFB;
        public string AccelLR;
        public string Inlet_Switch_Indicator;
        public string AC_Blower_Level;
        public string WhilteLine_Left;
        public string LKA_Steering_Support;
        public string WhilteLine_Right;

    }

    List<Row> rowList = new List<Row>();
    bool isLoaded = false;

    public bool IsLoaded()
    {
        return isLoaded;
    }

    public List<Row> GetRowList()
    {
        return rowList;
    }

    public void Load(TextAsset csv)
    {
        rowList.Clear();
        string[][] grid = CsvParser2.Parse(csv.text);
        for (int i = 1; i < grid.Length; i++)
        {
            Row row = new Row();
            row.gpsDate = grid[i][0];
            row.latitude = grid[i][1];
            row.longitude = grid[i][2];
            row.Power_Mode = grid[i][3];
            row.Fuel_Consum = grid[i][4];
            row.GD_Engine_Temp = grid[i][5];
            row.Steering_Angle_Speed = grid[i][6];
            row.Transmission_Type = grid[i][7];
            row.Vehicle_Speed = grid[i][8];
            row.Engine_Speed = grid[i][9];
            row.Brake_Control_Volume = grid[i][10];
            row.Radar_Cruise_State = grid[i][11];
            row.Streering_Angle_Degree = grid[i][12];
            row.Odometer_Reading = grid[i][13];
            row.Hood_Courtesy = grid[i][14];
            row.Passenger_AC_Value = grid[i][15];
            row.Driver_AC_Value = grid[i][16];
            row.Fuel_Gauge = grid[i][17];
            row.Rear_Fog_Light = grid[i][18];
            row.Front_Fog_Light = grid[i][19];
            row.Lounge_Illum_Light = grid[i][20];
            row.Front_Dome_Light = grid[i][21];
            row.Slide_Roof = grid[i][22];
            row.Passenger_Window_State = grid[i][23];
            row.RR_Window_State = grid[i][24];
            row.Driver_Window_State = grid[i][25];
            row.RL_Window_State = grid[i][26];
            row.AccelFB = grid[i][27];
            row.AccelLR = grid[i][28];
            row.Inlet_Switch_Indicator = grid[i][29];
            row.AC_Blower_Level = grid[i][30];
            row.WhilteLine_Left = grid[i][31];
            row.LKA_Steering_Support = grid[i][32];
            row.WhilteLine_Right = grid[i][33];

            rowList.Add(row);
        }
        isLoaded = true;
    }

    public int NumRows()
    {
        return rowList.Count;
    }

    public Row GetAt(int i)
    {
        if (rowList.Count <= i)
            return null;
        return rowList[i];
    }

    public Row Find_gpsDate(string find)
    {
        return rowList.Find(x => x.gpsDate == find);
    }
    public List<Row> FindAll_gpsDate(string find)
    {
        return rowList.FindAll(x => x.gpsDate == find);
    }
    public Row Find_latitude(string find)
    {
        return rowList.Find(x => x.latitude == find);
    }
    public List<Row> FindAll_latitude(string find)
    {
        return rowList.FindAll(x => x.latitude == find);
    }
    public Row Find_longitude(string find)
    {
        return rowList.Find(x => x.longitude == find);
    }
    public List<Row> FindAll_longitude(string find)
    {
        return rowList.FindAll(x => x.longitude == find);
    }
    public Row Find_Power_Mode(string find)
    {
        return rowList.Find(x => x.Power_Mode == find);
    }
    public List<Row> FindAll_Power_Mode(string find)
    {
        return rowList.FindAll(x => x.Power_Mode == find);
    }
    public Row Find_Fuel_Consum(string find)
    {
        return rowList.Find(x => x.Fuel_Consum == find);
    }
    public List<Row> FindAll_Fuel_Consum(string find)
    {
        return rowList.FindAll(x => x.Fuel_Consum == find);
    }
    public Row Find_GD_Engine_Temp(string find)
    {
        return rowList.Find(x => x.GD_Engine_Temp == find);
    }
    public List<Row> FindAll_GD_Engine_Temp(string find)
    {
        return rowList.FindAll(x => x.GD_Engine_Temp == find);
    }
    public Row Find_Steering_Angle_Speed(string find)
    {
        return rowList.Find(x => x.Steering_Angle_Speed == find);
    }
    public List<Row> FindAll_Steering_Angle_Speed(string find)
    {
        return rowList.FindAll(x => x.Steering_Angle_Speed == find);
    }
    public Row Find_Transmission_Type(string find)
    {
        return rowList.Find(x => x.Transmission_Type == find);
    }
    public List<Row> FindAll_Transmission_Type(string find)
    {
        return rowList.FindAll(x => x.Transmission_Type == find);
    }
    public Row Find_Vehicle_Speed(string find)
    {
        return rowList.Find(x => x.Vehicle_Speed == find);
    }
    public List<Row> FindAll_Vehicle_Speed(string find)
    {
        return rowList.FindAll(x => x.Vehicle_Speed == find);
    }
    public Row Find_Engine_Speed(string find)
    {
        return rowList.Find(x => x.Engine_Speed == find);
    }
    public List<Row> FindAll_Engine_Speed(string find)
    {
        return rowList.FindAll(x => x.Engine_Speed == find);
    }
    public Row Find_Brake_Control_Volume(string find)
    {
        return rowList.Find(x => x.Brake_Control_Volume == find);
    }
    public List<Row> FindAll_Brake_Control_Volume(string find)
    {
        return rowList.FindAll(x => x.Brake_Control_Volume == find);
    }
    public Row Find_Radar_Cruise_State(string find)
    {
        return rowList.Find(x => x.Radar_Cruise_State == find);
    }
    public List<Row> FindAll_Radar_Cruise_State(string find)
    {
        return rowList.FindAll(x => x.Radar_Cruise_State == find);
    }
    public Row Find_Streering_Angle_Degree(string find)
    {
        return rowList.Find(x => x.Streering_Angle_Degree == find);
    }
    public List<Row> FindAll_Streering_Angle_Degree(string find)
    {
        return rowList.FindAll(x => x.Streering_Angle_Degree == find);
    }
    public Row Find_Odometer_Reading(string find)
    {
        return rowList.Find(x => x.Odometer_Reading == find);
    }
    public List<Row> FindAll_Odometer_Reading(string find)
    {
        return rowList.FindAll(x => x.Odometer_Reading == find);
    }
    public Row Find_Hood_Courtesy(string find)
    {
        return rowList.Find(x => x.Hood_Courtesy == find);
    }
    public List<Row> FindAll_Hood_Courtesy(string find)
    {
        return rowList.FindAll(x => x.Hood_Courtesy == find);
    }
    public Row Find_Passenger_AC_Value(string find)
    {
        return rowList.Find(x => x.Passenger_AC_Value == find);
    }
    public List<Row> FindAll_Passenger_AC_Value(string find)
    {
        return rowList.FindAll(x => x.Passenger_AC_Value == find);
    }
    public Row Find_Driver_AC_Value(string find)
    {
        return rowList.Find(x => x.Driver_AC_Value == find);
    }
    public List<Row> FindAll_Driver_AC_Value(string find)
    {
        return rowList.FindAll(x => x.Driver_AC_Value == find);
    }
    public Row Find_Fuel_Gauge(string find)
    {
        return rowList.Find(x => x.Fuel_Gauge == find);
    }
    public List<Row> FindAll_Fuel_Gauge(string find)
    {
        return rowList.FindAll(x => x.Fuel_Gauge == find);
    }
    public Row Find_Rear_Fog_Light(string find)
    {
        return rowList.Find(x => x.Rear_Fog_Light == find);
    }
    public List<Row> FindAll_Rear_Fog_Light(string find)
    {
        return rowList.FindAll(x => x.Rear_Fog_Light == find);
    }
    public Row Find_Front_Fog_Light(string find)
    {
        return rowList.Find(x => x.Front_Fog_Light == find);
    }
    public List<Row> FindAll_Front_Fog_Light(string find)
    {
        return rowList.FindAll(x => x.Front_Fog_Light == find);
    }
    public Row Find_Lounge_Illum_Light(string find)
    {
        return rowList.Find(x => x.Lounge_Illum_Light == find);
    }
    public List<Row> FindAll_Lounge_Illum_Light(string find)
    {
        return rowList.FindAll(x => x.Lounge_Illum_Light == find);
    }
    public Row Find_Front_Dome_Light(string find)
    {
        return rowList.Find(x => x.Front_Dome_Light == find);
    }
    public List<Row> FindAll_Front_Dome_Light(string find)
    {
        return rowList.FindAll(x => x.Front_Dome_Light == find);
    }
    public Row Find_Slide_Roof(string find)
    {
        return rowList.Find(x => x.Slide_Roof == find);
    }
    public List<Row> FindAll_Slide_Roof(string find)
    {
        return rowList.FindAll(x => x.Slide_Roof == find);
    }
    public Row Find_Passenger_Window_State(string find)
    {
        return rowList.Find(x => x.Passenger_Window_State == find);
    }
    public List<Row> FindAll_Passenger_Window_State(string find)
    {
        return rowList.FindAll(x => x.Passenger_Window_State == find);
    }
    public Row Find_RR_Window_State(string find)
    {
        return rowList.Find(x => x.RR_Window_State == find);
    }
    public List<Row> FindAll_RR_Window_State(string find)
    {
        return rowList.FindAll(x => x.RR_Window_State == find);
    }
    public Row Find_Driver_Window_State(string find)
    {
        return rowList.Find(x => x.Driver_Window_State == find);
    }
    public List<Row> FindAll_Driver_Window_State(string find)
    {
        return rowList.FindAll(x => x.Driver_Window_State == find);
    }
    public Row Find_RL_Window_State(string find)
    {
        return rowList.Find(x => x.RL_Window_State == find);
    }
    public List<Row> FindAll_RL_Window_State(string find)
    {
        return rowList.FindAll(x => x.RL_Window_State == find);
    }
    public Row Find_AccelFB(string find)
    {
        return rowList.Find(x => x.AccelFB == find);
    }
    public List<Row> FindAll_AccelFB(string find)
    {
        return rowList.FindAll(x => x.AccelFB == find);
    }
    public Row Find_AccelLR(string find)
    {
        return rowList.Find(x => x.AccelLR == find);
    }
    public List<Row> FindAll_AccelLR(string find)
    {
        return rowList.FindAll(x => x.AccelLR == find);
    }
    public Row Find_Inlet_Switch_Indicator(string find)
    {
        return rowList.Find(x => x.Inlet_Switch_Indicator == find);
    }
    public List<Row> FindAll_Inlet_Switch_Indicator(string find)
    {
        return rowList.FindAll(x => x.Inlet_Switch_Indicator == find);
    }
    public Row Find_AC_Blower_Level(string find)
    {
        return rowList.Find(x => x.AC_Blower_Level == find);
    }
    public List<Row> FindAll_AC_Blower_Level(string find)
    {
        return rowList.FindAll(x => x.AC_Blower_Level == find);
    }
    public Row Find_WhilteLine_Left(string find)
    {
        return rowList.Find(x => x.WhilteLine_Left == find);
    }
    public List<Row> FindAll_WhilteLine_Left(string find)
    {
        return rowList.FindAll(x => x.WhilteLine_Left == find);
    }
    public Row Find_LKA_Steering_Support(string find)
    {
        return rowList.Find(x => x.LKA_Steering_Support == find);
    }
    public List<Row> FindAll_LKA_Steering_Support(string find)
    {
        return rowList.FindAll(x => x.LKA_Steering_Support == find);
    }
    public Row Find_WhilteLine_Right(string find)
    {
        return rowList.Find(x => x.WhilteLine_Right == find);
    }
    public List<Row> FindAll_WhilteLine_Right(string find)
    {
        return rowList.FindAll(x => x.WhilteLine_Right == find);
    }

}